# Detect OS and Architecture
OS := $(shell uname -s)
ARCH := $(shell uname -m)
ifeq ($(findstring CYGWIN, $(OS)),CYGWIN)
    OS := Windows
endif

OBJ_DIR = O.$(OS)-$(ARCH)
BIN_DIR = $(DD)../bin/$(OS)-$(ARCH)

# Common library search paths
LIB_DIRS := /usr/lib64 /usr/lib/x86_64-linux-gnu /lib64 /usr/lib /lib /opt/local/lib /sw/lib /usr/sfw/lib
  
Z_LIB = $(firstword $(wildcard \
           $(addsuffix /libz.dylib, $(LIB_DIRS)) \
           $(addsuffix /libz.so, $(LIB_DIRS)) \
           $(addsuffix /libz.a, $(LIB_DIRS))))
LZMA_LIB = $(firstword $(wildcard \
           $(addsuffix /liblzma.dylib, $(LIB_DIRS)) \
           $(addsuffix /liblzma.so, $(LIB_DIRS)) \
           $(addsuffix /liblzma.a, $(LIB_DIRS)) \
           $(addsuffix /lzma.lib, $(DD)../lzma)))
HDF5_LIB = $(firstword $(wildcard \
           $(addsuffix /libhdf5.dylib, $(LIB_DIRS)) \
           $(addsuffix /libhdf5.so, $(LIB_DIRS)) \
           $(addsuffix /libhdf5.a, $(LIB_DIRS))))
SZ_LIB = $(firstword $(wildcard \
           $(addsuffix /libsz.dylib, $(LIB_DIRS)) \
           $(addsuffix /libsz.so, $(LIB_DIRS)) \
           $(addsuffix /libsz.a, $(LIB_DIRS))))
GSL_LIB = $(firstword $(wildcard \
           $(addsuffix /libgsl.dylib, $(LIB_DIRS)) \
           $(addsuffix /libgsl.so, $(LIB_DIRS)) \
           $(addsuffix /libgsl.a, $(LIB_DIRS))))
GSLCBLAS_LIB = $(firstword $(wildcard \
              $(addsuffix /libgslcblas.dylib, $(LIB_DIRS)) \
              $(addsuffix /libgslcblas.so, $(LIB_DIRS)) \
              $(addsuffix /libgslcblas.a, $(LIB_DIRS))))

EXTRA_INC_DIRS = $(sort $(dir $(filter-out ,$(Z_LIB) $(LZMA_LIB) $(HDF5_LIB) $(SZ_LIB) $(GSL_LIB) $(GSLCBLAS_LIB))))
EXTRA_INC_DIRS := $(patsubst %/lib64/,%/include, $(EXTRA_INC_DIRS))
EXTRA_INC_DIRS := $(patsubst %/x86_64-linux-gnu/,%/include, $(EXTRA_INC_DIRS))
EXTRA_INC_DIRS := $(patsubst %/lib/,%/include, $(EXTRA_INC_DIRS))
EXTRA_INC_DIRS := $(patsubst %,-I%, $(EXTRA_INC_DIRS))

LIB_LINK_DIRS = -LO.$(OS)-$(ARCH) -L$(DD)../mdbcommon/O.$(OS)-$(ARCH) -L$(DD)../SDDSlib/O.$(OS)-$(ARCH) -L$(DD)../rpns/code/O.$(OS)-$(ARCH) -L$(DD)../mdbmth/O.$(OS)-$(ARCH) -L$(DD)../mdblib/O.$(OS)-$(ARCH)

ifeq ($(OS), Linux)
  CC = gcc
  CCC = g++
  AR = ar rcs
  RANLIB = ranlib
  CFLAGS = -m64 -O3 -g -Wall -fPIC $(EXTRA_INC_DIRS)
  CCFLAGS = -m64 -O3 -g -Wall -fPIC $(EXTRA_INC_DIRS)
  LDFLAGS = -static-libstdc++ -rdynamic -m64
  PROD_SYS_LIBS = -lpthread -lm -lrt -ldl -lgcc
  OBJEXT = o
  LIBEXT = a
  LIBPRE = lib

  CUSTOM_GCC_PATH = /usr/local/oag/3rdParty/gcc-11.3.0
  ifneq ($(wildcard $(CUSTOM_GCC_PATH)),)
    CC = $(CUSTOM_GCC_PATH)/bin/gcc
    CCC = $(CUSTOM_GCC_PATH)/bin/g++
    AR = $(CUSTOM_GCC_PATH)/bin/gcc-ar -rc
    RANLIB = $(CUSTOM_GCC_PATH)/bin/gcc-ranlib
  endif
endif

ifeq ($(OS), Darwin)
  CC = clang
  CCC = clang++
  AR = libtool -static -o
  RANLIB = ranlib
  #MAC_VERSION = -mmacosx-version-min=10.13
  CFLAGS = -Wno-deprecated-non-prototype -m64 -O3 -g -Wall -fPIC -fno-common $(MAC_VERSION) $(EXTRA_INC_DIRS)
  CCFLAGS = -Wno-deprecated-non-prototype -m64 -O3 -g -Wall -fPIC -fno-common -std=c++11 $(MAC_VERSION) $(EXTRA_INC_DIRS)
  LDFLAGS = $(MAC_VERSION) -std=c++11
  PROD_SYS_LIBS = -lm
  OBJEXT = o
  LIBEXT = a
  LIBPRE = lib
  EXEEXT =
endif

ifeq ($(ARCH), x86_64)
    CFLAGS += -mtune=generic
    CCFLAGS += -mtune=generic
endif

ifeq ($(ARCH), arm64)
    CFLAGS += -mcpu=native
    CCFLAGS += -mcpu=native
endif

# Adjust for Windows in a cygwin terminal
ifeq ($(OS), Windows)
  HDF_DIR = c:/HDF5/1.12.1
  CC = cl
  CCC = cl
  CFLAGS = -nologo -FC -D__STDC__=0 -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE -Ox -GL -Oy- -W3 -MD $(EXTRA_INC_DIRS)
  CCFLAGS = -EHsc -GR -nologo -FC -D__STDC__=0 -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE -Ox -GL -Oy- -W3 -MD $(EXTRA_INC_DIRS)
  LINKEXE = link -nologo -LTCG -incremental:no -opt:ref -release -MACHINE:X64
  LINKDLL = link -nologo -LTCG -incremental:no -opt:ref -release -MACHINE:X64 -subsystem:windows -dll
  LINKLIB = lib -nologo
  OBJEXT = obj
  LIBEXT = lib
  LIBPRE =
  EXEEXT = .exe
endif


ifeq ($(OS), Windows)
OUTPUT =
else
OUTPUT = -o $@
endif
